#to copy currently selected parts from assembly with global placement
#with renaming to simplify names
sel = FreeCADGui.Selection.getSelection()
newObjs = []
for i,obj in enumerate(sel):
    print(obj.Label)
    newObjs.append(App.ActiveDocument.copyObject(obj))
    newObjs[-1].Placement = obj.getGlobalPlacement()
    newObjs[-1].Label = 'T{:03d}'.format(i)
    print(newObjs[-1].Label)

#write stp file for an assembly, preserving global position for each part
#and renaming to simplify PFC file
allObjs = []
file = '/home/tom/SPARC/CAD/test.stp'
count = 0
for obj in FreeCAD.ActiveDocument.Objects:
    if type(obj) == Part.Feature:
        tmpObj = App.ActiveDocument.copyObject(obj)
        tmpObj.Label = 'T{:03d}'.format(count)
        tmpObj.Placement = obj.getGlobalPlacement()
        allObjs.append(obj)
        count += 1

ImportGui.export(allObjs, file)

#creates intersect line or a column of PFC names for PFC file
#run in freecad python console then copy and paste output
#into PFC file
sel = FreeCADGui.Selection.getSelection()
line = ''
for obj in sel:
    print(obj.Label)
    line += ':'+obj.Label


print(line)


#hide objects by color.  
#send an object to python console then get its color:
color = obj.ViewObject.ShapeAppearance[0].DiffuseColor
#Before running, select all objects to be included
#in GUI.  define the color first
color = (1.0, 0, 0, 0)
sel = FreeCADGui.Selection.getSelection()
for obj in sel:
    try:
       if obj.ViewObject.ShapeAppearance[0].DiffuseColor == color:
            #to hide, uncomment this line
            #obj.ViewObject.Visibility = False
            #to delete, uncomment this line:
            FreeCAD.ActiveDocument.removeObject(obj.Name)
    except:
       print("Could not get color of shape: " + obj.Label)




#to move (translate) in direction normal to face.
#1st, select face for normal and send part to python console via right click in tree view
#then run (where delta = distance to move)
#first get normal
N = sub.normalAt(0,0) #sometimes obj is a sub, not elt
delta = -0.1
move = delta*N #use negative for direction opposite normal
#now select all objects you want to move and move them
objs = FreeCADGui.Selection.getSelection()
for obj in objs:
    obj.Placement.move(move)


#to translate along an arbitrary vector
N = FreeCAD.Vector(0,-1,0)
delta = -0.2
move = delta*N #use negative for direction opposite normal
#now select all objects you want to move and move them
objs = FreeCADGui.Selection.getSelection()
for obj in objs:
    obj.Placement.move(move)



#perform multiple translations on multiple parts simultaneously
#first, select the surfaces and assign them to vectors
vecList = []
#do this for each surface (note that deltas below must be index aligned)
#first, select the face then right click -> send to python console
N = sub.normalAt(0,0)
vecList.append(N)
#list of translations that is indexed to match the vecList above
#negative if opposite to normal vector
deltas = [0.8250, 0.9125, 0.4675]

#before running this select all the components you want to translate
objs = FreeCADGui.Selection.getSelection()
totalMove = FreeCAD.Vector(0,0,0)
for i,v in enumerate(vecList):
    print(deltas[i])
    move = deltas[i]*v
    totalMove +=move
    for obj in objs:
        obj.Placement.move(move)

#print the total translation for use later
print(totalMove)




#to rotate an object about z axis
#select object, then run this macro
deg = 0.0282 #degrees to rotate
objs = FreeCADGui.Selection.getSelection()
for obj in objs:
    # Get the current rotation
    current_rotation = obj.Placement.Rotation
    # Define the new rotation (30 degrees around Z-axis)
    new_rotation = FreeCAD.Rotation(FreeCAD.Vector(0,0,1), deg)
    # Combine the new rotation with the current rotation
    combined_rotation = new_rotation.multiply(current_rotation)
    obj.Placement.Rotation = combined_rotation
    obj.ViewObject.update()



#get all the objects displayed in the active view
# Get all objects in the document
all_objects = App.ActiveDocument.Objects
# Filter objects to include only visible ones (not hidden)
sel = [obj for obj in all_objects if obj.ViewObject.Visibility]


